{"version":3,"sources":["scripts/views/login/index.js"],"names":["regTel","regPwd","timer","num","TabPane","Tabs","Login","telChange","val","console","log","test","setState","codeBtn","codeChange","tel","state","value","loginBtn","getCode","setInterval","txt","toggle","clearInterval","axios","post","mobile","checkCode","code","then","res","data","type","history","push","sessionStorage","token","callback","key","handleSubmit","e","preventDefault","props","form","validateFields","err","values","remember","url","method","alert","this","getFieldDecorator","className","defaultActiveKey","onChange","tab","forceRender","placeholder","maxLength","ref","el","disabled","id","size","onClick","onSubmit","Item","rules","required","message","prefix","style","color","valuePropName","initialValue","href","Component","Form","create","name"],"mappings":"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","file":"static/js/18.384f2fae.chunk.js","sourcesContent":["\r\n\r\n\r\nimport \"./index.scss\";\r\n\r\nimport { axios } from \"&\";\r\n\r\nimport { Button, List, InputItem, WhiteSpace } from \"antd-mobile\";\r\nimport { Tabs, Form, Icon, Input, Checkbox } from 'antd';\r\n\r\n\r\nexport const regTel = /^1[3|5|7|8|9]\\d{9}$/;\r\n\r\nexport const regPwd = /^\\d{4}$/;\r\n\r\nimport { history } from \"&\"\r\n\r\nlet timer = \"\";\r\nlet num = 10;\r\nconst { TabPane } = Tabs;\r\nclass Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loginBtn: false,\r\n            codeBtn: false,\r\n            num: num,\r\n            txt: \"发送验证码\",\r\n            toggle: true,\r\n        }\r\n    }\r\n    telChange = (val) => {\r\n        console.log(regTel.test(val))\r\n        this.setState({\r\n            codeBtn: regTel.test(val)\r\n        })\r\n    }\r\n    codeChange = (val) => {\r\n        let tel = this.tel.state.value;\r\n        this.setState({\r\n            loginBtn: regTel.test(tel) && regPwd.test(val),\r\n        })\r\n    }\r\n    getCode = () => {\r\n        timer = setInterval(() => {\r\n            if (this.state.num > 0) {\r\n                this.state.num--;\r\n                this.setState({\r\n                    num: this.state.num,\r\n                    txt: \"还有\" + this.state.num + \"秒\",\r\n                    codeBtn: false,\r\n                    toggle: false,\r\n                })\r\n\r\n            } else {\r\n                this.setState({\r\n                    num: num,\r\n                    txt: \"发送验证码\",\r\n                    codeBtn: true,\r\n                    toggle: true,\r\n\r\n                })\r\n                clearInterval(timer)\r\n\r\n            }\r\n        }, 1000)\r\n\r\n        axios.post(\"/react/sendCode\", {\r\n            mobile: this.tel.state.value,\r\n        })\r\n    }\r\n\r\n    checkCode = () => {\r\n        console.log(111)\r\n        axios.post(\"/react/checkCode\", {\r\n            mobile: this.tel.state.value,\r\n            code: this.code.state.value,\r\n        }).then(res => {\r\n            if (!!res.data.type) {\r\n                history.push(\"/index/mine\");\r\n                sessionStorage.token = res.data.token\r\n            } else {\r\n                sessionStorage.token = \"\"\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    callback = (key) => {\r\n        console.log(key)\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(values);\r\n                if (values.remember) {\r\n                    axios({\r\n                        url: \"/react/managerlogin\",\r\n                        data: values,\r\n                        method: \"POST\",\r\n                    }).then(res => {\r\n                        if (res.data.code == 200) {\r\n                            history.push(\"/index/viewover\")\r\n                        }\r\n                    })\r\n                } else {\r\n                    alert(\"请同意用户注册协议\")\r\n                }\r\n            }\r\n        });\r\n    };\r\n    render() {\r\n        const { loginBtn, codeBtn, txt, toggle } = this.state;\r\n        const {\r\n            form: { getFieldDecorator },\r\n        } = this.props;\r\n        return (\r\n\r\n            <div className=\"wholeLogin\">\r\n                <div className=\"up\">\r\n                    后台管理系统\r\n                </div>\r\n                <div className=\"down\">\r\n                    <Tabs defaultActiveKey=\"1\" onChange={this.callback}>\r\n                        <TabPane\r\n                            tab=\"员工登录\"\r\n                            key=\"1\"\r\n                            forceRender={false}\r\n                        >\r\n                            <List\r\n                                className=\"list\"\r\n                            >\r\n                                <InputItem\r\n                                    className=\"user\"\r\n                                    onChange={this.telChange}\r\n                                    type=\"number\"\r\n                                    placeholder=\"请输入手机号\"\r\n                                    maxLength={11}\r\n                                    ref={el => this.tel = el}\r\n                                    disabled={!toggle}\r\n                                >手机号码</InputItem>\r\n                                <InputItem\r\n                                    onChange={this.codeChange}\r\n                                    className=\"pwd\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"请输入验证码\"\r\n                                    maxLength={4}\r\n                                    ref={el => this.code = el}\r\n                                >密码\r\n                                    <Button\r\n                                        id=\"s-btn\"\r\n                                        size=\"small\"\r\n                                        type=\"primary\"\r\n                                        disabled={!codeBtn}\r\n                                        onClick={this.getCode}\r\n                                    >{txt}</Button>\r\n                                </InputItem>\r\n                            </List>\r\n                            <WhiteSpace />\r\n                            <Button\r\n                                className=\"l-btn\"\r\n                                type=\"primary\"\r\n                                disabled={!loginBtn}\r\n                                onClick={this.checkCode}\r\n                            >登录</Button>\r\n                            <WhiteSpace />\r\n                        </TabPane>\r\n                        <TabPane\r\n                            tab=\"管理员登录\"\r\n                            key=\"2\"\r\n                            forceRender={false}\r\n                        >\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('manager', {\r\n                                        rules: [{ required: true, message: '请输入管理员账号' }],\r\n                                    })(\r\n                                        <Input\r\n                                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"请输入管理员账号\"\r\n                                        />,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('pwd', {\r\n                                        rules: [{ required: true, message: '请输入管理员账号' }],\r\n                                    })(\r\n                                        <Input\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"请输入管理员密码\"\r\n                                        />,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('remember', {\r\n                                        valuePropName: 'checked',\r\n                                        initialValue: true,\r\n                                    })(<Checkbox>同意用户注册协议</Checkbox>)}\r\n                                    <a className=\"login-form-forgot\" href=\"\">\r\n                                        忘记密码\r\n                                    </a>\r\n                                    <br />\r\n                                    <button type=\"primary\" type=\"submit\" className=\"login-form-button\">\r\n                                        管理员登录\r\n                                    </button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </TabPane>\r\n                    </Tabs>,\r\n                    <WhiteSpace />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Form.create({ name: '管理员登录' })(Login);\r\n"],"sourceRoot":""}