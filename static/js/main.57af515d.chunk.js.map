{"version":3,"sources":["immutable/actions/index.js","scripts/index.js","scripts/views/index.js","utils/axios.js","utils/history.js","utils/index.js","App.js","serviceWorker.js","immutable/reducers/login.js","immutable/reducers/staff.js","immutable/reducers/dimission.js","immutable/reducers/ask.js","immutable/reducers/index.js","store.js","index.js","utils/lazyload.js"],"names":["GETSTAFFS","getStaffs","a","url","params","axios","get","res","type","staffs","data","result","GETPARTSTAFF","ADDSTAFF","GETSTAFFNAME","getName","payload","GETENTRYTIME","getentrytime","GETREASON","getReason","GETDIMISSION","getDimission","UPDATESTAFFSTATE","updatestaffstate","UPDATELISTSTATE","updateliststate","REMOVEDIMISSION","GETASK","getAsk","UPDATEASKSTATE","updateAskState","Main","basename","React","Component","Layout","className","path","exact","render","to","component","Lazyload","defaults","baseURL","headers","common","post","alert","failToast","msg","hide","fail","successToast","success","interceptors","request","use","config","console","log","loading","sessionStorage","token","error","Promise","reject","response","setTimeout","code","alertInstance","text","onPress","style","history","push","close","showAlert","createHashHistory","addZero","value","format","time","now","Date","year","getFullYear","month","getMonth","days","getDate","App","Boolean","window","location","hostname","match","defaultState","immutable","Map","username","partStaff","name","entrytime","reason","part","dimission","ask","reducers","combineReducers","login","state","action","staff","set","store","createStore","applyMiddleware","thunk","promise","moment","locale","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingComponent","loader","Loadable"],"mappings":"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","file":"static/js/main.57af515d.chunk.js","sourcesContent":["\r\n\r\n\r\n//async  +await es7\r\n//async 表明 这个函数（变量）是个promise 对象\r\n\r\n//await 表明获取 promise 操作后的结果 （包括then 和catch）\r\n\r\nimport { axios } from \"&\";\r\n\r\n\r\nexport const GETSTAFFS = \"getstaffs\";\r\n\r\nexport async function getStaffs({ url, params }) {\r\n\r\n    const res = await axios.get(url, { params });\r\n\r\n    return {\r\n        type: GETSTAFFS,\r\n        staffs: res.data.result,\r\n    }\r\n}\r\n\r\n//获取部分员工信息\r\n\r\nexport const GETPARTSTAFF = \"getpartstaff\";\r\n\r\nexport async function getPartStaff({ url, params }) {\r\n\r\n    let res = await axios.get(url, { params });\r\n\r\n    return {\r\n        type: GETPARTSTAFF,\r\n        payload: res.data.result,\r\n    }\r\n\r\n}\r\n\r\n\r\n//新增 员工信息\r\n\r\nexport const ADDSTAFF = \"addstaff\";\r\n\r\nexport async function addStaff({ url, params }) {\r\n\r\n    let res = await axios.get(url, { params });\r\n\r\n    return {\r\n\r\n        type: ADDSTAFF,\r\n        payload: res.data.result,\r\n    }\r\n}\r\n\r\n//获取  员工姓名\r\n\r\nexport const GETSTAFFNAME = \"getstaffname\";\r\n\r\nexport const getName = (payload) => {\r\n\r\n    return {\r\n        type: GETSTAFFNAME,\r\n        payload,\r\n    }\r\n\r\n}\r\n\r\n//获取 员工 入职时间\r\n\r\nexport const GETENTRYTIME = \"getentrytime\";\r\n\r\nexport const getentrytime = (payload) => {\r\n\r\n    return {\r\n        type: GETENTRYTIME,\r\n        payload,\r\n    }\r\n\r\n}\r\n\r\nexport const GETREASON = \"getReason\";\r\n\r\nexport const getReason = (payload) => {\r\n\r\n    return {\r\n\r\n        type: GETREASON,\r\n        payload,\r\n    }\r\n}\r\n\r\n\r\n//获取员工离职表\r\n\r\nexport const GETDIMISSION = \"getdimission\";\r\n\r\nexport async function getDimission({ url }) {\r\n\r\n    let res = await axios.get(url)\r\n\r\n    return {\r\n        type: GETDIMISSION,\r\n        payload: res.data.result,\r\n    }\r\n}\r\n\r\n// 审批 员工离职 单\r\n\r\nexport const UPDATESTAFFSTATE = \"updatestaffstate\";\r\n\r\nexport async function updatestaffstate({ url, params }) {\r\n\r\n    let res = await axios.get(url, { params })\r\n\r\n    return {\r\n        type: UPDATESTAFFSTATE,\r\n        payload: res.data.result,\r\n    }\r\n\r\n}\r\n//对列表  员工 进行 状态 改变\r\n\r\nexport const UPDATELISTSTATE = \"updateliststate\";\r\n\r\nexport async function updateliststate({ url, params }) {\r\n\r\n    let res = await axios.get(url, { params });\r\n\r\n    return {\r\n        type: UPDATELISTSTATE,\r\n        payload: res.data.result,\r\n    }\r\n\r\n}\r\n\r\n//撤销 员工 申请信息\r\n\r\nexport const REMOVEDIMISSION = \"removedimission\";\r\n\r\nexport async function removeDimission({ url, params }) {\r\n\r\n    let res = await axios.get(url, { params });\r\n\r\n    return {\r\n        type: REMOVEDIMISSION,\r\n        payload: res.data.result\r\n    }\r\n}\r\n\r\n// 获取 请假 员工 信息\r\n\r\n\r\nexport const GETASK = \"getask\";\r\n\r\nexport async function getAsk({ url, params }) {\r\n\r\n    let res = await axios.get(url, { params });\r\n\r\n    return {\r\n        type: GETASK,\r\n        payload: res.data.result,\r\n    }\r\n\r\n}\r\n//修改 请假员工 状态\r\n\r\nexport const UPDATEASKSTATE =\"updateaskstate\";\r\n\r\nexport async function updateAskState({url,params}){\r\n\r\n    let res =await axios.get(url,{params});\r\n\r\n    return {\r\n\r\n        type:UPDATEASKSTATE,\r\n\r\n        payload:res.data.result\r\n\r\n    }\r\n\r\n}","\r\n\r\n\r\nimport Layout from \"./views\";\r\n\r\nimport { HashRouter as Hash, Route } from \"react-router-dom\";\r\n\r\n\r\nexport default class Main extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Hash\r\n                basename=\"/\"\r\n            >\r\n                <Layout></Layout>\r\n            </Hash>\r\n        )\r\n    }\r\n\r\n}","\r\n\r\n\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\n// import Guide from \"./guide\"\r\nimport Lazyload from \"&/lazyload\"\r\n\r\n// import Login from \"./login\";\r\n \r\n// import Index from \"./app\";\r\nexport default class Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Layout\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={() => (<Redirect to=\"/login\"></Redirect>)}></Route>\r\n                    <Route path=\"/Index\" component={Lazyload(()=>import(\"./app\"))}></Route>\r\n                    <Route path=\"/login\" component={Lazyload(()=>import(\"./login\"))}></Route>\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","\r\n\r\n\r\nimport axios from \"axios\";\r\nlet token = \"\";\r\naxios.defaults.baseURL = \"https://fengkang.work:1906\";\r\naxios.defaults.headers.common['token'] = token;\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\r\n\r\n\r\nimport { Toast, Modal } from \"antd-mobile\";\r\n\r\nimport { history } from \"&\";\r\nconst alert = Modal.alert;\r\n\r\nconst showAlert = () => {\r\n    const alertInstance = alert('登录提示', '你确定要登录吗', [\r\n        { text: '放弃', onPress: () => console.log('游客访问'), style: 'default' },\r\n        { text: '马上登录', onPress: () => history.push(\"/login\") },\r\n    ]);\r\n    setTimeout(() => {\r\n        // 可以调用close方法以在外部close\r\n        console.log('auto close');\r\n        alertInstance.close();\r\n    }, 500000);\r\n};\r\n\r\nexport function loadingToast(msg) {\r\n    Toast.hide();\r\n    Toast.loading(msg, 1, () => {\r\n        console.log(\"load component !!\")\r\n    })\r\n}\r\n\r\nexport function failToast(msg) {\r\n    Toast.hide();\r\n    Toast.fail(msg, 1);\r\n}\r\nexport function successToast(msg) {\r\n    Toast.hide();\r\n    Toast.success(msg, 1)\r\n}\r\n\r\naxios.interceptors.request.use(function (config) {\r\n    console.log(config)\r\n    loadingToast(\"正在请求\");\r\n    config.headers[\"token\"] = sessionStorage.token;\r\n    return config;\r\n}, function (error) {\r\n\r\n    failToast(\"请求数据失败\")\r\n    return Promise.reject(error);\r\n\r\n})\r\n\r\naxios.interceptors.response.use(function (response) {\r\n    console.log(response)\r\n    setTimeout(() => {\r\n        successToast(response.data.msg);\r\n        if (response.data.code == 500) {\r\n            showAlert();\r\n        }\r\n    })\r\n\r\n    successToast(\"接受数据成功\", 1)\r\n    return response;\r\n}, function (error) {\r\n    failToast(\"响应数据失败\")\r\n    return Promise.reject(error);\r\n})\r\nexport { axios };","\r\nimport {createHashHistory,createBrowserHistory} from \"history\";\r\n\r\nexport const history = new createHashHistory();\r\n\r\n// export {history};","\r\n\r\nfunction addZero(value) {\r\n\r\n    return value < 10 ? '0'+value :   value;\r\n\r\n}\r\n\r\n\r\nexport const format = function (time) {\r\n\r\n    var now = new Date(time);\r\n\r\n    let year = now.getFullYear();\r\n    let month = now.getMonth() + 1;\r\n    let days = now.getDate()\r\n\r\n    return `${addZero(year)}/${addZero(month)}/${addZero(days)}`\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport { axios } from \"./axios\";\r\n\r\nexport { history } from \"./history\";\r\n","import React from 'react';\nimport './App.css';\n\nimport Main  from \"./scripts\";\n\nfunction App() {\n  return (\n      <div className=\"app\">\n        <Main></Main>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n\r\nimport immutable from \"immutable\";\r\n\r\nconst defaultState = immutable.Map({\r\n    username: \"\",\r\n    code: \"\",\r\n})\r\n\r\n\r\nexport const login = (state = defaultState, action) => {\r\n\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n\r\n}\r\n","\r\n\r\nimport immutable from \"immutable\";\r\nimport { GETSTAFFS, GETPARTSTAFF, ADDSTAFF, UPDATELISTSTATE } from \"../actions\";\r\n\r\nconst defaultState = immutable.Map({\r\n    staffs: [],\r\n    partStaff: [],\r\n})\r\n\r\nexport const staff = (state = defaultState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case GETSTAFFS:\r\n            return state.set(\"staffs\", action.staffs);\r\n            break;\r\n\r\n\r\n        case GETPARTSTAFF:\r\n            return state.set(\"partStaff\", action.payload);\r\n            break;\r\n\r\n        case ADDSTAFF:\r\n            return state.set(\"staffs\", action.payload);\r\n            break;\r\n\r\n\r\n        case UPDATELISTSTATE:\r\n            return state.set(\"staffs\", action.payload)\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n\r\n}\r\n","\r\nimport immutable from \"immutable\";\r\nimport { GETSTAFFNAME, GETENTRYTIME, GETREASON, GETDIMISSION, UPDATESTAFFSTATE, REMOVEDIMISSION} from \"../actions\";\r\n\r\nconst defaultState = immutable.Map({\r\n\r\n    name: \"\",\r\n    entrytime: \"\",\r\n    reason: \"\",\r\n    part: \"\",\r\n    dimission: [],\r\n\r\n})\r\n\r\nexport const dimission = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n\r\n        case GETSTAFFNAME:\r\n            return state.set('name', action.payload);\r\n            break;\r\n\r\n        case GETENTRYTIME:\r\n            return state.set('entrytime', action.payload);\r\n            break;\r\n\r\n\r\n        case GETREASON:\r\n            return state.set(\"reason\", action.payload);\r\n            break;\r\n\r\n\r\n        case GETDIMISSION:\r\n            return state.set(\"dimission\",action.payload);\r\n            break;\r\n\r\n\r\n        case UPDATESTAFFSTATE:\r\n            return state.set(\"dimission\",action.payload);\r\n            break;\r\n            \r\n        case REMOVEDIMISSION:\r\n            return state.set(\"dimission\",action.payload);\r\n            break;\r\n            \r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}\r\n","\r\n\r\nimport immutable from \"immutable\";\r\n\r\nimport { GETASK, UPDATEASKSTATE } from \"../actions\";\r\n\r\nconst defaultState = immutable.Map({\r\n    ask:[],\r\n})\r\n\r\nexport const ask =(state =defaultState,action)=>{\r\n\r\n    switch (action.type) {\r\n\r\n        case GETASK:\r\n            return state.set(\"ask\",action.payload);\r\n            break;\r\n\r\n        case UPDATEASKSTATE:\r\n            return state.set(\"ask\",action.payload);\r\n            break;\r\n\r\n        default :\r\n        return state;\r\n        break;\r\n    }\r\n}","\r\n\r\n\r\n\r\nimport { combineReducers } from \"redux-immutable\";\r\n\r\nimport {login} from \"./login\"\r\nimport { staff } from \"./staff\";\r\nimport { dimission } from \"./dimission\";\r\nimport { ask } from \"./ask\";\r\n \r\nexport const reducers = combineReducers({\r\n    login:login,\r\n    staff:staff,\r\n    dimission:dimission,\r\n    ask:ask,\r\n})","\r\n\r\n\r\n\r\n\r\nimport { createStore,applyMiddleware } from \"redux\";\r\n\r\nimport { reducers } from \"./immutable/reducers\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport promise from \"redux-promise\";\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunk,promise));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nmoment.locale('zh-cn');\nimport \"./styles/index.scss\"\n\nimport store from \"./store\";\n\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root'));\nserviceWorker.unregister();\n","import React from 'react';\r\nimport Loadable from 'react-loadable';\r\n\r\n//通用的过场组件\r\nconst loadingComponent = () => {\r\n    return (\r\n        <div>loading</div>\r\n    )\r\n}\r\n\r\n//过场组件默认采用通用的，若传入了loading，则采用传入的过场组件\r\nexport default (loader, loading = loadingComponent) => {\r\n    return Loadable({\r\n        loader,   // 需要懒加载的组件 \r\n        loading\r\n    });\r\n}"],"sourceRoot":""}